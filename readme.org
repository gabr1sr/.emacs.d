#+title: Emacs Configuration
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Configuration

** global
#+begin_src emacs-lisp
(setq global/bibliography-list '("~/org/biblio/books.bib"
				     "~/org/biblio/blockchain.bib"
				     "~/org/biblio/whitepapers.bib"))
#+end_src

** git
#+begin_src emacs-lisp
(setq user-full-name "Gabriel Rosa"
      user-mail-address "gabr1sr@proton.me")
#+end_src

** MELPA
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src

** Straight.el
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src

** encoding
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8-unix)
(set-language-environment "UTF-8")
#+end_src

** startup
#+begin_src emacs-lisp
(setq debug-on-error t
      load-prefer-newer t
      inhibit-startup-message t)

(global-display-line-numbers-mode 1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

** fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono" :height 100 :weight 'regular)
#+end_src

** custom
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(ignore-errors (load custom-file))

(defvar user-cache-directory (expand-file-name ".cache" user-emacs-directory))
(defvar user-backup-directory (expand-file-name "backup" user-emacs-directory))
(defvar user-autosave-directory (expand-file-name "autosave" user-emacs-directory))

(dolist (dir (list user-cache-directory user-backup-directory user-autosave-directory))
  (when (not (file-directory-p dir))
    (make-directory dir t)))

(setq backup-directory-alist `(("." . ,user-backup-directory))
      auto-save-filename-transforms `(("." ,user-autosave-directory t))
      auto-save-list-file-prefix (concat user-autosave-directory ".saves-")
      tramp-backup-directory-alist `((".*" . ,user-backup-directory))
      tramp-auto-save-directory user-autosave-directory)
#+end_src

** electric
#+begin_src emacs-lisp
(when (fboundp 'electric-pair-mode)
  (electric-pair-mode t))
#+end_src

** compatibility
#+begin_src emacs-lisp
(dolist (mode '(pdf-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** tree-sitter
#+begin_src emacs-lisp
(setq treesit-language-source-alist
      '((elixir "https://github.com/elixir-lang/tree-sitter-elixir")
	    (heex "https://github.com/phoenixframework/tree-sitter-heex")))
#+end_src

* Packages

** which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :hook (after-init . which-key-mode)
  :config
  (which-key-setup-side-window-bottom))
#+end_src

** company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :hook (after-init . global-company-mode))
#+end_src

** vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t)
  :bind
  (:map vertico-map
        ("C-j" . vertico-next)
	("C-k" . vertico-previous)
	("C-f" . vertico-exit)
	:map minibuffer-local-map
	("M-h" . backward-kill-word)))
#+end_src

** savehist
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src

** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :after (vertico)
  :init
  (marginalia-mode)
  :custom
  (marginalia-annotators
   '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

** embark
*** embark
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  :config
  (add-to-list 'display-buffer-alist
  	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none))))
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings)))
#+end_src

*** embark-consult
#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** citar
#+begin_src emacs-lisp
(use-package citar
  :ensure t
  :custom
  (citar-bibliography global/bibliography-list)
  (citar-notes-paths '("~/org/roam/refs/"))
  (citar-open-note-function 'orb-citar-edit-note)
  (citar-at-point-function 'embark-act)
  ; templates
  (citar-templates
   '((main . "${author editor:30%sn}     ${date year issued:4}     ${title:48}")
     (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
     (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
     (note . "Notes on ${author editor:%etal}, ${title}")))
  ; advices
  (advice-add 'org-cite-insert :after #'(lambda (args)
					              (save-excursion (left-char) (citar-org-update-prefix-suffix))))
  :bind
  (:map org-mode-map :package org (("C-c b b" . citar-insert-citation)
				       ("C-c b r" . citar-insert-reference)
				       ("C-c b o" . citar-open-notes))))
#+end_src

** citar-embark
#+begin_src emacs-lisp
(use-package citar-embark
  :ensure t
  :after (citar embark)
  :config
  (citar-embark-mode))
#+end_src

** citeproc
#+begin_src emacs-lisp
(use-package citeproc
  :ensure t)
#+end_src

** org
#+begin_src emacs-lisp
(use-package org
  :defer t
  :config
  (add-to-list 'org-modules 'org-habit)
  :custom
  ; org
  (org-directory (file-truename "~/org/"))
  (org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d!)" "CANCELED(c@)")))
  ; indentation
  (org-startup-truncated nil)
  (org-startup-indented t)
  (org-src-preserve-indentation nil)
  (org-edit-src-content-indentation 0)
  ; logging
  (org-log-done 'time)
  (org-log-into-drawer t)
  ; templates
  (org-capture-templates
   '(("t" "Tasks")
     ("tt" "Task" entry (file+olp "~/org/tasks.org" "Inbox")
      "* TODO %?\n%U\n%i"
      :empty-lines 1)

     ("tl" "Located Task" entry (file+olp "~/org/tasks.org" "Inbox")
      "* TODO %?\n%U\n%a\n%i"
      :empty-lines 1)

     ("ts" "Scheduled Task" entry (file+olp "~/org/tasks.org" "Inbox")
      "* TODO %?\nSCHEDULED: %^t\n%U\n%i"
      :empty-lines 1)))
  :bind
  (("C-c a" . org-agenda)
   ("C-c l" . org-store-link)
   ("C-c c" . org-capture)))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :defer t
  :custom
  (org-agenda-files '("habits.org" "tasks.org" "study.org"))
  (org-agenda-start-with-log-mode t))
#+end_src

** ox-hugo
#+begin_src emacs-lisp
(use-package ox-hugo
  :ensure t
  :after (ox)
  :custom
  (org-hugo-base-dir "~/org/blog/"))
#+end_src

** org-babel
#+begin_src emacs-lisp
(use-package ob
  :defer t
  :custom
  (org-babel-load-languages '((emacs-lisp . t)))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
#+end_src

** org-cite
#+begin_src emacs-lisp
(use-package oc
  :defer t
  :custom
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (org-cite-global-bibliography global/bibliography-list)
  (org-cite-export-processors '((latex biblatex)
				(t csl)))
  (org-cite-csl-styles-dir "~/org/csl/"))

(use-package oc-biblatex
  :after oc)

(use-package oc-csl
  :after oc)

(use-package oc-natbib
  :after oc)
#+end_src

** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:42}" 'face 'org-tag)))
  (org-roam-db-autosync-enable)
  :custom
  (org-roam-directory (file-truename "~/org/roam/"))
  (org-roam-complete-everywhere t)
  ; templates
  (org-roam-capture-templates
   '(("d" "default" plain "%?"
      :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)

     ("z" "zettel" plain (file "~/org/templates/zettel.org")
      :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unarrowed t)

     ("r" "reading notes" plain "%?"
      :target (file+head "refs/${citar-citekey}.org" "#+title: ${note-title}\n#+created: %U\n")
      :unarrowed t)))
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n g" . org-roam-graph)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n c" . org-roam-node-capture)
   ("C-c n u" . org-roam-ui-mode))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map))
#+end_src

*** Templates
**** ~/org/templates/zettel.org
#+begin_src org :tangle ~/org/templates/zettel.org :mkdirp yes
- tags ::
- source ::
#+end_src

** org-roam-bibtex
#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :ensure t
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :custom
  (org-roam-bibtex-preformat-keywords
   '("=key=" "title" "file" "author" "keywords"))
  (orb-process-file-keyword t)
  (orb-process-file-field t)
  (orb-attached-file-extensions '("pdf")))
#+end_src

** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :ensure t
  :after (org-roam)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))
#+end_src

** citar-org-roam
#+begin_src emacs-lisp
(use-package citar-org-roam
  :ensure t
  :after (citar org-roam)
  :config
  (citar-org-roam-mode)
  (setq citar-org-roam-note-title-template "${author} - ${title}")
  (setq citar-org-roam-capture-template-key "r"))
#+end_src

** pdftools
#+begin_src emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install-noverify)
  :bind
  (:map pdf-view-mode-map ("q" . #'kill-current-buffer)))
#+end_src

** org-pdftools
#+begin_src emacs-lisp
(use-package org-pdftools
  :ensure t
  :hook (org-mode . org-pdftools-setup-link))
#+end_src

** org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :after (org)
  :config
  (global-org-modern-mode))
#+end_src

** magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
  (magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
  (magit-bury-buffer-function 'magit-restore-window-configuration))
#+end_src

** magit-todos
#+begin_src emacs-lisp
(use-package magit-todos
  :ensure t
  :custom
  (magit-todos-nice nil)
  (magit-todos-scanner 'magit-todos--scan-with-git-grep)
  (add-to-list 'hl-todo-keyword-faces '("@audit" "#D2691F")))
#+end_src

** projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map))
#+end_src

** eglot
#+begin_src emacs-lisp
(use-package eglot
  :defer t
  :config
  (setq-default eglot-workspace-configuration
		    '((solidity
		       (defaultCompiler . "remote")
		       (compileUsingRemoteVersion . "latest")
		       (compileUsingLocalVersion . "~/bin/soljson.js"))))
  (add-to-list 'eglot-server-programs
	           '(solidity-mode . ("vscode-solidity-server" "--stdio")))
  (add-to-list 'eglot-server-programs
	           '((elixir-ts-mode heex-ts-mode) . ("language_server.bat"))))
#+end_src

** solidity-mode
#+begin_src emacs-lisp
(use-package solidity-mode
  :ensure t
  :hook (solidity-mode . eglot-ensure)
  :custom
  (solidity-comment-style 'slash))
#+end_src

** javascript
*** js2-mode
#+begin_src emacs-lisp
(use-package js2-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
  (setq js2-mode-hook
  '(lambda () (progn
    (set-variable 'indent-tabs-mode nil)))))
#+end_src

*** js2-refactor
#+begin_src emacs-lisp
(use-package js2-refactor
  :ensure t
  :config
  (add-hook 'js2-mode-hook #'js2-refactor-mode))
#+end_src

*** rjsx-mode
#+begin_src emacs-lisp
(use-package rjsx-mode
  :ensure t
  :hook (rjsx-mode . eglot-ensure)
  :config
  (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode)))
#+end_src

*** xref-js2
#+begin_src emacs-lisp
(use-package xref-js2
  :ensure t
  :hook (js2-mode . eglot-ensure)
  :config
  (define-key js2-mode-map (kbd "M-.") nil)
  (add-hook 'js2-mode-hook (lambda ()
			     (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
  (setq xref-js2-search-program 'rg))
#+end_src

** typescript
*** typescript-mode
#+begin_src emacs-lisp
(use-package typescript-mode
  :ensure t
  :hook (typescript-mode . eglot-ensure)
  :config
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-tsx-mode)))
#+end_src

*** tide
#+begin_src emacs-lisp
(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))
#+end_src

** erlang
#+begin_src emacs-lisp
(use-package erlang
  :ensure t
  :mode ("\\.erlang\\'" . erlang-mode)
  :mode ("/rebar\\.config\\(?:\\.script\\)?\\'" . erlang-mode)
  :mode ("/\\(?:app\\|sys\\)\\.config\\'" . erlang-mode)
  :hook (erlang-mode . eglot-ensure))
#+end_src

** elixir
*** elixir-ts-mode
#+begin_src emacs-lisp
(use-package elixir-ts-mode
  :ensure t
  :hook (elixir-ts-mode . eglot-ensure))
#+end_src

*** heex-ts-mode
#+begin_src emacs-lisp
(use-package heex-ts-mode
  :ensure t
  :hook (heex-ts-mode . eglot-ensure))
#+end_src

** ssh-agency
#+begin_src emacs-lisp
(use-package ssh-agency
  :ensure t)
#+end_src

** consult
*** consult
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
#+end_src

*** consult-todo
#+begin_src emacs-lisp
(use-package consult-todo
  :straight (consult-todo :type git :host github :repo "liuyinz/consult-todo")
  :config
  (setq consult-todo-narrow
    '((?t . "TODO")
      (?f . "FIXME")
      (?b . "BUG")
      (?h . "HACK")
      (?a . "@audit"))))
#+end_src

** editorconfig
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src

** doom
*** doom-themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
	      doom-themes-enable-italic t)
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

*** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+end_src
