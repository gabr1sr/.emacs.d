#+title: Emacs init.el Literate Configuration
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

This is my Emacs Literate Configuration. I'm currently using it in my Windows 11 setup. You can modify and use as you want.

* Early Init File
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
(setq package-enable-at-startup nil)
#+end_src

* Optimizations
Garbage Collector Optimizations.

#+begin_src emacs-lisp
(setq gc-cons-threshold-original gc-cons-threshold)
(setq gc-cons-threshold (* 1024 1024 100))

(setq file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)

(run-with-idle-timer
 5 nil
 (lambda ()
   (setq gc-cons-threshold gc-cons-threshold-original)
   (setq file-name-handler-alist file-name-handler-alist-original)
   (makunbound 'gc-cons-threshold-original)
   (makunbound 'file-name-handler-alist-original)
   (message "gc-cons-threshold and file-name-handler-alist restored")))
#+end_src

* Global Variables
Global variables are variables used throughout the configuration.

#+begin_src emacs-lisp
(setq global/bibliography-list '("~/org/biblio/books.bib"
				 "~/org/biblio/blockchain.bib"
				 "~/org/biblio/whitepapers.bib"))
#+end_src

* Git Variables
Variables used for Git-related things.

#+begin_src emacs-lisp
(setq user-full-name "Gabriel Rosa"
      user-email-address "gabr1sr@proton.me")
#+end_src

* Straight.el Bootstrap
Bootstrapping straight.el.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src

* Encoding
Set editor default encoding.

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8-unix)
(set-language-environment "UTF-8")
#+end_src

* Startup
Things that are loaded when Emacs starts.

#+begin_src emacs-lisp
(setq load-prefer-newer t
      inhibit-startup-message t)

(global-display-line-numbers-mode 1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

* Fonts
Editor fonts.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono" :height 100 :weight 'regular)
#+end_src

* Custom
Load custom file and set cache, backup and autosave directories.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(ignore-errors (load custom-file))

(defvar user-cache-directory (expand-file-name ".cache" user-emacs-directory))
(defvar user-backup-directory (expand-file-name "backup" user-emacs-directory))
(defvar user-autosave-directory (expand-file-name "autosave" user-emacs-directory))

(dolist (dir (list user-cache-directory user-backup-directory user-autosave-directory))
  (when (not (file-directory-p dir))
    (make-directory dir t)))

(setq backup-directory-alist `(("." . ,user-backup-directory))
      auto-save-filename-transforms `(("." ,user-autosave-directory t))
      auto-save-list-file-prefix (concat user-autosave-directory ".saves-")
      tramp-backup-directory-alist `((".*" . ,user-backup-directory))
      tramp-auto-save-directory user-autosave-directory)
#+end_src

* Electric Pairs
Use the built-in autopairs mode.

#+begin_src emacs-lisp
(when (fboundp 'electric-pair-mode)
  (electric-pair-mode t))
#+end_src

* Compatibility
Minimal adjustments to solve compatibility issues.

** pdf-view
#+begin_src emacs-lisp
(dolist (mode '(pdf-view-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Tree Sitter
Tree Sitter languages support.

#+begin_src emacs-lisp
(setq treesit-language-source-alist
      '((rust "https://github.com/tree-sitter/tree-sitter-rust")
	(heex "https://github.com/phoenixframework/tree-sitter-heex")
	(elixir "https://github.com/elixir-lang/tree-sitter-elixir")))
#+end_src

* Packages
Package-specific configurations.

** which-key
#+begin_src emacs-lisp
(use-package which-key
  :straight (which-key :type git :host github :repo "justbur/emacs-which-key")
  :hook (after-init . which-key-mode)
  :config
  (which-key-setup-side-window-bottom))
#+end_src

** company
#+begin_src emacs-lisp
(use-package company
  :straight (company :type git :host github :repo "company-mode/company-mode")
  :hook (after-init . global-company-mode))
#+end_src

** vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight (vertico :type git :host github :repo "minad/vertico")
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t)
  :bind
  (:map vertico-map
	("C-j" . vertico-next)
	("C-k" . vertico-previous)
	("C-f" . vertico-exit)
	:map minibuffer-local-map
	("M-h" . backward-kill-word)))
#+end_src

** savehist
#+begin_src emacs-lisp
(use-package savehist
  :straight (savehist :type built-in)
  :init
  (savehist-mode))
#+end_src

** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :straight (marginalia :type git :host github :repo "minad/marginalia")
  :after (vertico)
  :init
  (marginalia-mode)
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src

** embark
#+begin_src emacs-lisp
(use-package embark
  :straight (embark :type git :host github :repo "oantolin/embark")
  :hook (eldoc-documentation-functions . embark-eldoc-first-target)
  :custom
  (prefix-help-command #'embark-prefix-help-command)
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none))))
  :bind
  ("C-." . embark-act)
  ("C-;" . embark-dwim)
  ("C-h B" . embark-bindings))
#+end_src

** citar
#+begin_src emacs-lisp
(use-package citar
  :straight (citar :type git :host github :repo "emacs-citar/citar")
  :custom
  (citar-bibliography global/bibliography-list)
  (citar-notes-paths '("~/org/roam/refs/"))
  (citar-open-note-function 'orb-citar-edit-note)
  (citar-at-point-function 'embark-act)
  ; templates
  (citar-templates
   '((main . "${author editor:30%sn}     ${date year issued:4}     ${title:48}")
     (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
     (preview . "${author editor:%etal} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
     (note . "Notes on ${author editor:%etal}, ${title}")))
  ; advices
  (advice-add 'org-cite-insert :after #'(lambda (args)
					              (save-excursion (left-char) (citar-org-update-prefix-suffix))))
  :bind
  (:map org-mode-map :package org (("C-c b b" . citar-insert-citation)
				   ("C-c b r" . citar-insert-reference)
				   ("C-c b o" . citar-open-notes))))
#+end_src

** citar-embark
#+begin_src emacs-lisp
(use-package citar-embark
  :after (citar embark)
  :config
  (citar-embark-mode))
#+end_src

** citeproc
#+begin_src emacs-lisp
(use-package citeproc
  :straight (citeproc :type git :host github :repo "andras-simonyi/citeproc-el"))
#+end_src

** org
#+begin_src emacs-lisp
(use-package org
  :straight (org :type built-in)
  :custom
  ; org
  (org-directory (file-truename "~/org/"))
  (org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d!)" "CANCELED(c@)")))

  ; indentation
  (org-startup-truncated t)
  (org-startup-indented t)

  ; src block indentation
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-edit-src-content-indentation 0)

  ; logging
  (org-log-done 'time)
  (org-log-into-drawer t)

  ; templates
  (org-capture-templates
   '(("t" "Tasks")
      ("tt" "Task" entry (file+olp "~/org/tasks.org" "Inbox")
       "* TODO %?\n%U\n%i"
       :empty-lines 1)

      ("tl" "Located Task" entry (file+olp "~/org/tasks.org" "Inbox")
       "* TODO %?\n%U\n%a\n%i"
       :empty-lines 1)

      ("ts" "Scheduled Task" entry (file+olp "~/org/tasks.org" "Inbox")
       "* TODO %?\nSCHEDULED: %^t\n%U\n%i"
       :empty-lines 1)))
  :bind
  ("C-c a" . org-agenda)
  ("C-c l" . org-store-link)
  ("C-c c" . org-capture))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :straight (org-agenda :type built-in)
  :custom
  (org-agenda-files '("habits.org" "tasks.org" "study.org"))
  (org-agenda-start-with-log-mode t))
#+end_src

** org-babel
#+begin_src emacs-lisp
(use-package ob
  :straight (ob :type built-in)
  :custom
  (org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t)
							   (rust . t))))
#+end_src

** ob-rust
#+begin_src emacs-lisp
(use-package ob-rust
  :straight (ob-rust :type git :host github :repo "micanzhang/ob-rust"))
#+end_src

** ob-async
#+begin_src emacs-lisp
(use-package ob-async
  :straight (ob-async :type git :host github :repo "astahlman/ob-async"))
#+end_src

** org-cite
#+begin_src emacs-lisp
(use-package oc
  :straight (oc :type built-in)
  :custom
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (org-cite-global-bibliography global/bibliography-list)
  (org-cite-export-processors '((latex biblatex)
				(t csl)))
  (org-cite-csl-styles-dir "~/org/csl/"))

(use-package oc-biblatex
  :straight (oc-biblatex :type built-in)
  :after oc)

(use-package oc-csl
  :straight (oc-csl :type built-in)
  :after oc)

(use-package oc-natbib
  :straight (oc-natbib :type built-in)
  :after oc)
#+end_src

** ox-hugo
#+begin_src emacs-lisp
(use-package ox-hugo
  :straight (ox-hugo :type git :host github :repo "kaushalmodi/ox-hugo")
  :after ox
  :custom
  (org-hugo-base-dir "~/org/blog/"))
#+end_src

** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :straight (org-roam :type git :host github :repo "org-roam/org-roam")
  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:42}" 'face 'org-tag)))
  (org-roam-db-autosync-enable)
  :custom
  (org-roam-directory (file-truename "~/org/roam/"))
  (org-roam-complete-everywhere t)
  ; templates
  (org-roam-capture-templates
   '(("d" "default" plain "%?"
      :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)

     ("z" "zettel" plain (file "~/org/templates/zettel.org")
      :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
      :unarrowed t)

     ("r" "reading notes" plain "%?"
      :target (file+head "refs/${citar-citekey}.org" "#+title: ${note-title}\n#+created: %U\n")
      :unarrowed t)))
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n g" . org-roam-graph)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n c" . org-roam-node-capture)
   ("C-c n u" . org-roam-ui-mode))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map))
#+end_src

*** Templates
**** ~/org/templates/zettel.org
#+begin_src org :tangle ~/org/templates/zettel.org :mkdirp yes
- tags ::
- source ::
#+end_src

** org-roam-bibtex
#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :straight (org-roam-bibtex :type git :host github :repo "org-roam/org-roam-bibtex")
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :custom
  (org-roam-bibtex-preformat-keywords
   '("=key=" "title" "file" "author" "keywords"))
  (orb-process-file-keyword t)
  (orb-process-file-field t)
  (orb-attached-file-extensions '("pdf")))
#+end_src

** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight (org-roam-ui :type git :host github :repo "org-roam/org-roam-ui")
  :after (org-roam)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))
#+end_src

** citar-org-roam
#+begin_src emacs-lisp
(use-package citar-org-roam
  :straight (citar-org-roam :type git :host github :repo "emacs-citar/citar-org-roam")
  :after (citar org-roam)
  :config
  (citar-org-roam-mode)
  (setq citar-org-roam-note-title-template "${author} - ${title}")
  (setq citar-org-roam-capture-template-key "r"))
#+end_src

** pdftools
#+begin_src emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install-noverify)
  :bind
  (:map pdf-view-mode-map ("q" . #'kill-current-buffer)))
#+end_src

** org-pdftools
#+begin_src emacs-lisp
(use-package org-pdftools
  :straight (org-pdftools :type git :host github :repo "fuxialexander/org-pdftools")
  :hook (org-mode . org-pdftools-setup-link))
#+end_src

** org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :straight (org-modern :type git :host github :repo "minad/org-modern")
  :after (org)
  :config
  (global-org-modern-mode))
#+end_src

** magit
#+begin_src emacs-lisp
(use-package magit
  :straight (magit :type git :host github :repo "magit/magit")
  :custom
  (magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
  (magit-bury-buffer-function 'magit-restore-window-configuration))
#+end_src

** magit-todos
#+begin_src emacs-lisp
(use-package magit-todos
  :straight (magit-todos :type git :host github :repo "alphapapa/magit-todos")
  :custom
  (magit-todos-nice nil)
  (magit-todos-scanner 'magit-todos--scan-with-git-grep)
  (add-to-list 'hl-todo-keyword-faces '("@audit" "#D2691F")))
#+end_src

** ssh-agency
#+begin_src emacs-lisp
(use-package ssh-agency
  :straight (ssh-agency :type git :host github :repo "magit/ssh-agency"))
#+end_src

** editorconfig
#+begin_src emacs-lisp
(use-package editorconfig
  :straight (editorconfig :type git :host github :repo "editorconfig/editorconfig-emacs")
  :config
  (editorconfig-mode 1))
#+end_src

** doom
*** doom-themes
#+begin_src emacs-lisp
(use-package doom-themes
  :straight (doom-themes :type git :host github :repo "doomemacs/themes")
  :config
  (setq doom-themes-enable-bold t
	      doom-themes-enable-italic t)
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

*** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight (doom-modeline :type git :host github :repo "seagle0128/doom-modeline")
  :hook (after-init . doom-modeline-mode))
#+end_src

** projectile
#+begin_src emacs-lisp
(use-package projectile
  :straight (projectile type: git :host github :repo "bbatsov/projectile")
  :init
  (projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map))
#+end_src

** eglot
#+begin_src emacs-lisp
(use-package eglot
  :straight (eglot :type built-in)
  :config
  (setq-default eglot-workspace-configuration
		    '((solidity
		       (defaultCompiler . "remote")
		       (compileUsingRemoteVersion . "latest")
		       (compileUsingLocalVersion . "~/bin/soljson.js"))))
  (add-to-list 'eglot-server-programs
	           '(solidity-mode . ("vscode-solidity-server" "--stdio")))
  (add-to-list 'eglot-server-programs
	           '((elixir-ts-mode heex-ts-mode) . ("language_server.bat"))))
#+end_src

** solidity-mode
#+begin_src emacs-lisp
(use-package solidity-mode
  :straight (solidity-mode :type git :host github :repo "ethereum/emacs-solidity")
  :hook (solidity-mode . eglot-ensure)
  :custom
  (solidity-comment-style 'slash))
#+end_src

** erlang
#+begin_src emacs-lisp
(use-package erlang
  :straight (erlang :source melpa)
  :mode ("\\.erlang\\'" . erlang-mode)
  :mode ("/rebar\\.config\\(?:\\.script\\)?\\'" . erlang-mode)
  :mode ("/\\(?:app\\|sys\\)\\.config\\'" . erlang-mode)
  :hook (erlang-mode . eglot-ensure))
#+end_src

** tree-sitter langs
*** elixir-ts-mode
#+begin_src emacs-lisp
(use-package elixir-ts-mode
  :straight (elixir-ts-mode :type git :host github :repo "wkirschbaum/elixir-ts-mode")
  :hook (elixir-ts-mode . eglot-ensure)
  :init
  (add-to-list 'org-src-lang-modes '("elixir" . elixir-ts)))
#+end_src

*** heex-ts-mode
#+begin_src emacs-lisp
(use-package heex-ts-mode
  :straight (heex-ts-mode :type git :host github :repo "wkirschbaum/heex-ts-mode")
  :hook (heex-ts-mode . eglot-ensure)
  :init
  (add-to-list 'org-src-lang-modes '("heex" . heex-ts)))
#+end_src

*** rust-ts-mode
#+begin_src emacs-lisp
(use-package rust-ts-mode
  :straight (rust-ts-mode :type built-in)
  :mode "\\.rs\\'"
  :hook (rust-ts-mode . eglot-ensure)
  :init
  (add-to-list 'org-src-lang-modes '("rust" . rust-ts)))
#+end_src
